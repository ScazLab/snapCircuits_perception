#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

from snap_circuits.msg import (snap_circuits_board, snap_circuits_part,
                               snap_location)
from board_perception.part_classifier import (PartDetector, N_ROWS, N_COLUMNS,
                                              ORIENTATIONS)


def location_to_message(x, y, orientation):
    return snap_location(x=x, y=y, o=ORIENTATIONS[orientation])


def board_to_message(board):
    parts = board['parts']
    msg = snap_circuits_board(n_rows=N_ROWS, n_cols=N_COLUMNS,
                              IDs=[part['id'] for part in parts])
    msg.parts = [snap_circuits_part(label=part['label'],
                                    loc=location_to_message(*part['location']))
                 for part in parts]
    return msg


class BoardClassificationNode:

    name = 'board_classifier'

    def __init__(self):
        rospy.init_node(self.name)
        self.img_sub = rospy.Subscriber('board_images', Image, self.receive)
        self.board_state_pub = rospy.Publisher('board_states',
                                               snap_circuits_board,
                                               queue_size=10)
        self.bridge = CvBridge()
        self.classifier = PartDetector()

    def receive(self, msg):
        image = self.bridge.imgmsg_to_cv2(msg)
        msg = board_to_message(self.classifier.analyse_board(image))
        rospy.loginfo('[Board classifier] Found: {}'.format(
            [p.label for p in msg.parts]))
        self.board_state_pub.publish(msg)


if __name__ == "__main__":
    node = BoardClassificationNode()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        pass
